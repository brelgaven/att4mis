Train ID 	: perf01 
Dataset 	: abide_caltech
The code runs deterministicaly.
/itet-stor/gtombak/net_scratch/conda_envs/pytcu10/lib/python3.8/site-packages/torchvision/transforms/functional.py:132: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1616554786078/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  img = torch.from_numpy(np.array(pic, np.float32, copy=False))
Traceback (most recent call last):
  File "train_segmentation_source.py", line 156, in <module>
    training_data = main(exp_config=exp_config)
  File "train_segmentation_source.py", line 140, in main
    training_data = train_segmentation_network(exp_config, model, model.parameters(), source_train_loader, source_val_loader, exp_config.path_to_save_trained_model)
  File "train_segmentation_source.py", line 74, in train_segmentation_network
    pred_logits, pred_softmax, pred_argmax = model(data)
  File "/itet-stor/gtombak/net_scratch/conda_envs/pytcu10/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/scratch_net/kringel/gtombak/documents/project_files/main/ctun/models/ctun.py", line 28, in forward
    y = self.decoder_unet(zs)
  File "/itet-stor/gtombak/net_scratch/conda_envs/pytcu10/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/scratch_net/kringel/gtombak/documents/project_files/main/ctun/models/model_zoo.py", line 197, in forward
    conv7_2 = self.relu(self.bn7_2(self.conv7_2(conv7_1)))
  File "/itet-stor/gtombak/net_scratch/conda_envs/pytcu10/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/itet-stor/gtombak/net_scratch/conda_envs/pytcu10/lib/python3.8/site-packages/torch/nn/modules/activation.py", line 102, in forward
    return F.relu(input, inplace=self.inplace)
  File "/itet-stor/gtombak/net_scratch/conda_envs/pytcu10/lib/python3.8/site-packages/torch/nn/functional.py", line 1206, in relu
    result = torch.relu(input)
RuntimeError: CUDA out of memory. Tried to allocate 32.00 MiB (GPU 0; 11.91 GiB total capacity; 10.84 GiB already allocated; 7.12 MiB free; 11.20 GiB reserved in total by PyTorch)
